- Installed package list

cat /etc/app/sources.list


sudo apt-get update
sudo apt-get upgrade


- Installed app called 'finger'
sudo apt-get install finger


- List all the user
finger

- See the detail of the specific user
finger <username>

- Add user
sudo adduser <username>



- Login as a specific user
ssh <username>@127.0.0.1 -p 2222


- Check vagrant port
vagrant port


- sudoers
sudo ls /etc/sudoers.d
sudo vi /etc/sudoers.d/<username>


- Password expiration
sudo passwd -e <username>

- generating key pair
ssh-keygen

- ssh settings for server
mkdir .ssh
touch .ssh/authorized_keys

copy from local machine .pub then put the value into authorized_keys

chmod 700 .ssh
chmod 644 .ssh/authorized_keys


- ssh login
ssh <username>@127.0.0.1 -p 2222 -i ~/.ssh.pub


- file permissions
-rw
-r
-r--

- List items and show some information
ls -al

- octal file permission

r 4
w 2
e 1


- file permission commands

chmod: file permission
chgrp: file group
chown: file owner



- Introduction to ports


- Introduction to Firewalls

sudo ufw status

sudo ufw default deny incoming
sudo ufw default allow outgoing

sudo ufw allow ssh
sudo ufw allow 2222/tcp
sudo ufw allow www
sudo ufw enable


- Web server
sudo apt-get install apache2

- wsgi
sudo apt-get install libapache2-mod-wsgi

You then need to configure Apache to handle requests using the WSGI module. You’ll do this by editing the /etc/apache2/sites-enabled/000-default.conf file. This file tells Apache how to respond to requests, where to find the files for a particular site and much more. You can read up on everything this file can do within the Apache documentation.

For now, add the following line at the end of the <VirtualHost *:80> block, right before the closing </VirtualHost> line: WSGIScriptAlias / /var/www/html/myapp.wsgi

Finally, restart Apache with the sudo apache2ctl restart command.






WSGI is a specification that describes how a web server communicates with web applications. Most if not all Python web frameworks are WSGI compliant, including Flask and Django; but to quickly test if you have your Apache configuration correct you’ll write a very basic WSGI application.

You just defined the name of the file you need to write within your Apache configuration by using the WSGIScriptAlias directive. Despite having the extension .wsgi, these are just Python applications. Create the /var/www/html/myapp.wsgi file using the command sudo nano /var/www/html/myapp.wsgi. Within this file, write the following application:

def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain'), ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    return [output]
This application will simply print return Hello World! along with the required HTTP response headers. After saving this file you can reload http://localhost:8080 to see your application run in all its glory!
